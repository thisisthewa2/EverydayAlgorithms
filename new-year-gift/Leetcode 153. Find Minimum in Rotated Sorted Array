#1. use sort function : O(NlogN)
class Solution:
    def findMin(self, nums: List[int]) -> int:
        nums.sort()
        return(nums[0])
      
#2. Leetcode Solution - binary search: O(logN)
Class Solution:
    def findMin(self, nums: List[int]) -> int:
        if len(nums)==1:
            return(nums[0])
        left = 0
        right = len(nums)-1

        if nums[right] > nums[0]:
            return nums[0]
        # 1 2 3 4 5 6
        
        # 3 4 5 1 2
        while right > left:
            mid = left+(right-left)//2
            if(nums[mid]>nums[mid+1]):
                 #reversed 
                return nums[mid+1]
            if(nums[mid]<nums[mid-1]):
                return nums[mid]
                #reversed 5 1 2
            
            # the least value is still somewhere to the right as we are still dealing with elements greater than nums[0]
            if nums[mid] > nums[0]:
                left = mid + 1
            # if nums[0] is greater than the mid value then this means the smallest value is somewhere to the left
            else:
                right = mid - 1
